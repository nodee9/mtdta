document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("imageList");let t=document.getElementById("openPersistentWindowBtn");const o=document.getElementById("mainContentContainer");if("true"===new URLSearchParams(window.location.search).get("persistent")){o&&(o.style.display="block"),t&&(t.style.display="none"),e.innerHTML='\n      <div style="font-family: Arial, sans-serif; padding: 0px;">\n        <h2 style="margin: 0 0 15px 0; color: #AD49E1; font-size: 16px;">Adobe Stock AI Metadata Injector</h2>\n        <p style="margin: 0 0 15px 0; color: #EBD3F8; line-height: 1.5;">\n          Klik tombol di bawah untuk memulai inject metadata untuk gambar pertama di grid.\n        </p>\n        <button id="startProcess" class="btn btn-primary">Mulai Inject Metadata</button>\n      </div>\n    ',document.getElementById("startProcess").addEventListener("click",l);const a=document.createElement("button");a.textContent="âŸ³",a.className="btn refresh-btn",a.onclick=function(){window.location.reload()},o?o.appendChild(a):document.body.appendChild(a);const n=document.createElement("a");n.href="https://www.nihbuatjajan.com/maggots",n.target="_blank",n.style.position="fixed",n.style.bottom="10px",n.style.right="10px",n.style.zIndex="1000",n.style.lineHeight="0";const r=document.createElement("img");r.loading="lazy",r.src=chrome.runtime.getURL("icons/default-cta.png"),r.alt="Nih buat jajan",r.style.setProperty("height","40px","important"),r.style.display="block",n.appendChild(r),o?o.appendChild(n):document.body.appendChild(n)}else{if(o&&(o.style.display="none"),t)t&&(t.style.display="block");else{t=document.createElement("img"),t.id="openPersistentWindowBtn",t.src=chrome.runtime.getURL("icons/icon48.png"),t.alt="Buka MMX",t.title="Buka MMX",t.className="btn icon-btn",t.style.cursor="pointer",t.style.width="48px",t.style.height="48px",t.style.display="block",t.style.margin="0 auto 0 auto";const e=document.querySelector(".container");e&&e.insertBefore(t,o)}const e=document.getElementById("openPersistentWindowBtn");e&&e.addEventListener("click",(function(){chrome.windows.create({url:chrome.runtime.getURL("popup/popup.html?persistent=true"),type:"popup",width:350,height:600}),window.close()}))}async function a(e){try{const t='Define image type (Photo/Illustration).\n        Photo: If the image looks realistic and was taken using a camera.\n        Illustration: If the image is a digital or traditional work of art created manually or with software.\n        Choose one category that best match the image: \n        1 Animals, 2 Buildings and Architecture, 3 Business, 4 Drinks, \n        5 The Environment, 6 States of Mind, 7 Food, 8 Graphic Resources, \n        9 Hobbies and Leisure, 10 Industry, 11 Landscapes, 12 Lifestyle, \n        13 People, 14 Plants and Flowers, 15 Culture and Religion, \n        16 Science, 17 Social Issues, 18 Sports, 19 Technology, \n        20 Transport, 21 Travel.\n        \n        Provide an engaging image caption to be posted to adobe stock marketplace. \n        The caption must be in Proper Case or Capitalized Case, HAVE NO COMMA, HAVE NO DOT, HAVE NO PUNCTUATION, \n        above 50 characters and under 100 characters. Do not exceed this limit under any circumstances. \n        Avoid introductory phrase, be direct and descriptive. \n        Avoid assumptions or guesses. \n        \n        If possible, specify the exact name of the object, landmark, or location \n        (e.g., "Eiffel Tower" instead of "tower" or "landmark"; \n        "Bald Eagle" instead of "bird"). \n        \n        Use specific terms for identifiable entities or features visible in the image, \n        avoiding overly generic descriptions. \n        Add emotional, engaging language to highlight the beauty, atmosphere, \n        or unique character of the scene. \n        \n        Generate no fewer than 40 and up to 45 unique and relevant keywords \n        describing the image to be posted to adobe stock marketplace. \n        Focus on words that are highly relevant to the image content and avoid \n        overly generic words. \n        Use synonyms and related terms (e.g., "gull", "seagull", "waterbird") \n        to diversify the keywords. \n        Avoid repeating the same concept unnecessarily unless it adds value. \n        Each keyword only contains one word. \n        Use lowercases and separate each keyword with a comma followed by a space.\n        \n        Format response in JSON with these properties:\n        - imageType: "Photo" or "Illustration"\n        - category: The selected category name\n        - caption: The generated caption (50-100 chars, no punctuation)\n        - keywords: Array of 40-45 keywords (all lowercase, single words)',o=await fetch("https://text.pollinations.ai/openai",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4-vision-preview",messages:[{role:"user",content:[{type:"text",text:t},{type:"image_url",image_url:{url:e}}]}],max_tokens:1e3})});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const a=(await o.json()).choices[0].message.content;console.log("generateMetadata: Raw content from API:",a);try{let e=a.trim();e.startsWith("```json")&&(e=e.substring(7)),e.endsWith("```")&&(e=e.substring(0,e.length-3)),e=e.trim(),e=e.replace(/,\s*(?=\])/g,""),e=e.replace(/(]\s*)\](\s*})/g,"$1$2"),console.log("generateMetadata: Content after cleaning attempts:",e);const t=JSON.parse(e);return console.log("generateMetadata: Parsed metadata:",t),t}catch(e){throw console.error("generateMetadata: Failed to parse JSON response from API:",e),console.error("generateMetadata: Raw content that failed parsing:",a),new Error(`Failed to parse metadata JSON from API: ${e.message}`)}}catch(e){throw console.error("Error generating metadata:",e),e}}async function n(e,t,o){console.log(`PAGE_SCRIPT: Menjalankan untuk imageIndex: ${t}`),console.log("PAGE_SCRIPT: Received metadataObject:",e);let a=e;if(console.log("PAGE_SCRIPT: Final metadata object:",a),!a||void 0===a.caption||void 0===a.keywords)return console.error("PAGE_SCRIPT: Metadata tidak lengkap atau invalid:",a),{success:!1,errors:["Metadata tidak lengkap atau formatnya salah setelah parsing."],filledFields:[],foundSelectors:{title:"",keywords:""},pageUrl:window.location.href};console.log("PAGE_SCRIPT: Verifikasi metadata.caption:",a.caption),console.log("PAGE_SCRIPT: Verifikasi typeof metadata.caption:",typeof a.caption),console.log("PAGE_SCRIPT: Verifikasi metadata.keywords:",a.keywords),console.log("PAGE_SCRIPT: Verifikasi Array.isArray(metadata.keywords):",Array.isArray(a.keywords)),console.log(`PAGE_SCRIPT: Mencari thumbnail gambar ke-${t}...`);const n=["div.upload-tile__wrapper"];let r=!1;for(const e of n){const o=document.querySelectorAll(e);if(o.length>t){const a=o[t];console.log(`PAGE_SCRIPT: Thumbnail gambar ke-${t} (selector: ${e}) ditemukan:`,a);try{console.log("PAGE_SCRIPT: Mengklik thumbnail..."),a.click(),r=!0,console.log("PAGE_SCRIPT: Menunggu UI update setelah klik (1000ms)..."),await new Promise((e=>setTimeout(e,1e3))),console.log("PAGE_SCRIPT: Selesai menunggu.");break}catch(o){console.warn(`PAGE_SCRIPT: Gagal mengklik thumbnail (selector: ${e}, index: ${t}). Error:`,o)}}}r||console.warn(`PAGE_SCRIPT: Tidak dapat menemukan atau mengklik thumbnail gambar ke-${t}.`);const i={success:!0,errors:[],filledFields:[],foundSelectors:{title:"",keywords:""},pageUrl:window.location.href,log:[],warnings:[]};async function s(e,t,o=!1){console.log("PAGE_SCRIPT: dispatchReactInputEvent untuk elemen: ",e,` dengan nilai: "${t}", skipBlur: ${o}`);let a=Object.getPrototypeOf(e);"INPUT"===e.tagName?a=window.HTMLInputElement.prototype:"TEXTAREA"===e.tagName?a=window.HTMLTextAreaElement.prototype:"SELECT"===e.tagName?(console.log("PAGE_SCRIPT: dispatchReactInputEvent targeting SELECT element."),a=window.HTMLSelectElement.prototype):(console.log("PAGE_SCRIPT: dispatchReactInputEvent targeting generic HTMLElement."),a=window.HTMLElement.prototype);const{set:n}=Object.getOwnPropertyDescriptor(a,"value")||{},{set:r}=Object.getOwnPropertyDescriptor(a,"checked")||{};"checkbox"===e.type&&r?(console.log("PAGE_SCRIPT: dispatchReactInputEvent for checkbox, using checkedSetter."),r.call(e,t)):n?(console.log("PAGE_SCRIPT: dispatchReactInputEvent using valueSetter."),n.call(e,t)):(console.warn("PAGE_SCRIPT: dispatchReactInputEvent - valueSetter not found for element. Falling back to direct value assignment.",e),e.value=t);const i=new Event("input",{bubbles:!0,cancelable:!0});e.dispatchEvent(i),console.log("PAGE_SCRIPT: Dispatched 'input' event.");const s=new Event("change",{bubbles:!0,cancelable:!0});if(e.dispatchEvent(s),console.log("PAGE_SCRIPT: Dispatched 'change' event."),!o){const t=new Event("blur",{bubbles:!0,cancelable:!0});e.dispatchEvent(t),console.log("PAGE_SCRIPT: Dispatched 'blur' event.")}}console.log("PAGE_SCRIPT: Mencari field file type (Photo/Illustration)...");const l='select[name="contentType"]',c=document.querySelector(l);if(c){console.log("PAGE_SCRIPT: Select element File Type ditemukan.");const e={Photo:"1",Photos:"1",Illustration:"2",Illustrations:"2",Vector:"3",Vectors:"3"}[a.imageType];e?c.value!==e?(c.value=e,await s(c,e),console.log(`PAGE_SCRIPT: File Type diatur ke ${a.imageType} (value: ${e})`),i.filledFields.push("File Type"),i.foundSelectors.fileType=l,await new Promise((e=>setTimeout(e,1e3)))):(console.log(`PAGE_SCRIPT: File Type sudah benar (${a.imageType}). Tidak ada perubahan.`),i.filledFields.push("File Type (already correct)"),i.foundSelectors.fileType=l,await new Promise((e=>setTimeout(e,1e3)))):(console.warn(`PAGE_SCRIPT: Nilai mapping untuk File Type '${a.imageType}' tidak ditemukan.`),i.errors.push(`Nilai mapping untuk File Type '${a.imageType}' tidak ditemukan.`))}else console.warn("PAGE_SCRIPT: Select element File Type tidak ditemukan dengan selector: "+l),i.errors.push("Select element File Type tidak ditemukan.");console.log("PAGE_SCRIPT: Mencari field category...");const d='select[name="category"]',g=document.querySelector(d);let m=null;if(g){console.log("PAGE_SCRIPT: Select element Category ditemukan.");let e=!1;for(let t=0;t<g.options.length;t++){const o=g.options[t];if(o.textContent.trim().toLowerCase()===a.category.trim().toLowerCase()){g.value!==o.value?(g.value=o.value,await s(g,o.value),console.log(`PAGE_SCRIPT: Category diatur ke ${a.category} (value: ${o.value})`),i.filledFields.push("Category")):(console.log(`PAGE_SCRIPT: Category sudah benar (${a.category}). Tidak ada perubahan.`),i.filledFields.push("Category (already correct)")),m=o.value,e=!0;break}}e?await new Promise((e=>setTimeout(e,1e3))):(console.warn(`PAGE_SCRIPT: Opsi Category dengan nama '${a.category}' tidak ditemukan.`),i.errors.push(`Opsi Category dengan nama '${a.category}' tidak ditemukan.`))}else console.warn("PAGE_SCRIPT: Select element Category tidak ditemukan dengan selector: "+d),i.errors.push("Select element Category tidak ditemukan.");if(console.log(`[MMX - Img ${t+1}] Category selected: ${a.category} (ID: ${m||a.category})`),await new Promise((e=>setTimeout(e,1e3))),console.log(`[MMX - Img ${t+1}] Checking 'isGenerativeAi' flag: ${o}`),i.log.push(`isGenerativeAi flag is: ${o}`),o){console.log(`[MMX - Img ${t+1}] 'Created using generative AI tools' is ON. Attempting to check related boxes.`),i.log.push("'Created using generative AI tools' is ON.");try{const e="input#content-tagger-generative-ai-checkbox",o=document.querySelector(e);if(console.log(`[MMX - Img ${t+1}] Found 'Generative AI checkbox' element:`,o),o){o.checked?(console.log(`[MMX - Img ${t+1}] 'Generative AI checkbox' was already checked.`),i.log.push("'Generative AI checkbox' was already checked.")):(o.click(),console.log(`[MMX - Img ${t+1}] Clicked 'Generative AI checkbox'.`),i.log.push("Clicked 'Generative AI checkbox'."),await new Promise((e=>setTimeout(e,1500))));const e="input#content-tagger-generative-ai-property-release-checkbox";let a=document.querySelector(e);console.log(`[MMX - Img ${t+1}] Initial check for 'Property release checkbox':`,a);let n=0;const r=10,s=500;for(;!a&&n<r;)console.log(`[MMX - Img ${t+1}] Waiting for 'Property release checkbox' to appear... (Attempt ${n+1})`),await new Promise((e=>setTimeout(e,s))),a=document.querySelector(e),console.log(`[MMX - Img ${t+1}] Found 'Property release checkbox' element (in loop attempt ${n+1}):`,a),n++;a?a.checked?(console.log(`[MMX - Img ${t+1}] 'Property release checkbox' was already checked.`),i.log.push("'Property release checkbox' was already checked.")):(a.click(),console.log(`[MMX - Img ${t+1}] Clicked 'Property release checkbox'.`),i.log.push("Clicked 'Property release checkbox'."),await new Promise((e=>setTimeout(e,500)))):(console.warn(`[MMX - Img ${t+1}] 'Property release checkbox' not found after ${r} attempts.`),i.warnings.push("'Property release checkbox' not found after checking 'Generative AI checkbox'."))}else console.warn(`[MMX - Img ${t+1}] 'Generative AI checkbox' not found with selector: ${e}`),i.warnings.push("'Generative AI checkbox' not found on the page.")}catch(e){console.error(`[MMX - Img ${t+1}] Error handling Generative AI checkboxes: ${e.message}`,e),i.errors.push(`Error handling Generative AI checkboxes: ${e.message}`)}}console.log("PAGE_SCRIPT: Mencari field title...");const p=['textarea[name="title"]','textarea[data-t="asset-title-content-tagger"]','textarea[aria-label="Content title"]',"textarea#metadata-title",'textarea[placeholder="Type title here (max: 200 characters)"]'];let u;for(const e of p)if(u=document.querySelector(e),u){i.foundSelectors.title=e,console.log("PAGE_SCRIPT: Field title ditemukan dengan selector: "+e);break}u?(console.log("PAGE_SCRIPT: Mengisi title dengan: "+a.caption),await s(u,a.caption),i.filledFields.push({fieldName:"title",value:a.caption,selector:i.foundSelectors.title}),0===t?(console.log("PAGE_SCRIPT: Menunggu ekstra untuk keywords gambar pertama (2000ms)..."),await new Promise((e=>setTimeout(e,2e3)))):(console.log("PAGE_SCRIPT: Menunggu tambahan sebelum mencari/mengisi Keywords (1000ms)..."),await new Promise((e=>setTimeout(e,1e3))))):(console.warn("PAGE_SCRIPT: Field title tidak ditemukan dengan selector manapun."),i.errors.push("Field title tidak ditemukan."),i.success=!1),console.log("PAGE_SCRIPT: Mencari field keywords...");const k=["textarea#content-keywords-ui-textarea",'textarea[data-t="content-keywords-ui-textarea"]','textarea[aria-label="Paste Keywords..."]','textarea[name="keywordsUITextArea"]',"textarea#metadata-keywords"];let h;for(const e of k)if(h=document.querySelector(e),h){i.foundSelectors.keywords=h.outerHTML.substring(0,200)+(h.outerHTML.length>200?"...":""),console.log("PAGE_SCRIPT: Field keywords ditemukan dengan selector: "+e);break}if(h){const e=a.keywords.join(", ");console.log("PAGE_SCRIPT: Mencoba fokus pada field keywords..."),h.focus(),await new Promise((e=>setTimeout(e,100))),console.log("PAGE_SCRIPT: Fokus selesai, melanjutkan dispatch event."),console.log("PAGE_SCRIPT: Mengisi keywords dengan: "+e),await s(h,e,!0),i.filledFields.push({fieldName:"keywords",value:e,selector:i.foundSelectors.keywords}),console.log("PAGE_SCRIPT: Attempting to simulate 'Enter' key press on keywords field.");try{const e=new KeyboardEvent("keydown",{key:"Enter",code:"Enter",keyCode:13,which:13,bubbles:!0,cancelable:!0,composed:!0});h.dispatchEvent(e),console.log("PAGE_SCRIPT: 'Enter' keydown event dispatched on keywords field.");const t=new KeyboardEvent("keyup",{key:"Enter",code:"Enter",keyCode:13,which:13,bubbles:!0,cancelable:!0,composed:!0});h.dispatchEvent(t),console.log("PAGE_SCRIPT: 'Enter' keyup event dispatched on keywords field."),await new Promise((e=>setTimeout(e,300))),console.log("PAGE_SCRIPT: Explicitly blurring keywords field after Enter simulation."),h.dispatchEvent(new Event("blur",{bubbles:!0,cancelable:!1})),await new Promise((e=>setTimeout(e,200)))}catch(e){console.error("PAGE_SCRIPT: Error dispatching 'Enter' key event on keywords field:",e),i.errors.push("Error dispatching 'Enter' key event for keywords: "+e.toString())}}else console.warn("PAGE_SCRIPT: Field keywords tidak ditemukan dengan selector manapun."),i.errors.push("Field keywords tidak ditemukan."),i.success=!1;return i.filledFields.find((e=>"title"===e.fieldName))&&i.filledFields.find((e=>"keywords"===e.fieldName))||(i.success=!1),console.log("PAGE_SCRIPT: Selesai menjalankan. Hasil operasi:",i),i}async function r(){console.log("CLICK_SAVE_SCRIPT: Mencoba menemukan dan mengklik tombol 'Save work'.");const e={success:!1,log:[],error:null},t='button[data-t="save-work"]',o=document.querySelector(t);if(o)if(e.log.push(`CLICK_SAVE_SCRIPT: Tombol 'Save work' (selector: ${t}) ditemukan.`),o.disabled)e.log.push("CLICK_SAVE_SCRIPT: Tombol 'Save work' ditemukan tetapi dalam keadaan disabled."),e.error="Tombol 'Save work' dinonaktifkan.";else try{e.log.push("CLICK_SAVE_SCRIPT: Mengklik tombol 'Save work'..."),o.click(),e.log.push("CLICK_SAVE_SCRIPT: Tombol 'Save work' berhasil diklik."),e.success=!0}catch(t){e.log.push(`CLICK_SAVE_SCRIPT: Error saat mengklik tombol 'Save work': ${t.message}`),e.error=`Gagal mengklik tombol 'Save work': ${t.message}`}else e.log.push(`CLICK_SAVE_SCRIPT: Tombol 'Save work' (selector: ${t}) tidak ditemukan.`),e.error="Tombol 'Save work' tidak ditemukan di halaman.";return console.log("CLICK_SAVE_SCRIPT: Mengembalikan hasil:",e),e}async function i(e,t,o,a){const r=document.createElement("div");r.style.marginTop="15px",r.style.padding="15px",r.style.backgroundColor="#AD49E1",r.style.borderRadius="8px",r.style.fontFamily="Arial, sans-serif",r.innerHTML='\n      <div style="text-align: center; padding: 20px;">\n        <div class="spinner" style="width: 30px; height: 30px; border: 3px solid #f3f3f3; border-top: 3px solid #4CAF50; border-radius: 50%; margin: 0 auto 15px; animation: spin 1s linear infinite;"></div>\n        <div>Mengisi form Adobe Stock...</div>\n      </div>\n      <style>\n        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }\n      </style>\n    ';try{console.log("Memulai auto-fill form...");const r=await async function(e,t,o,a){console.log("POPUP: Memulai pengisian field Adobe Stock dengan metadata:",e);try{if(!o)return console.error("POPUP: tabId tidak valid atau tidak diberikan ke fillAdobeStockFields."),{success:!1,error:"tabId tidak valid untuk fillAdobeStockFields"};console.log("POPUP: Menjalankan script di halaman target dengan tabId:",o,"dan metadata object...");const r=await chrome.scripting.executeScript({target:{tabId:o},function:n,args:[e,t,a]});return console.log("POPUP: Hasil eksekusi script dari halaman:",r),chrome.runtime.lastError?(console.error("POPUP: Error saat mengeksekusi script di halaman:",chrome.runtime.lastError),{success:!1,error:`Script execution error: ${chrome.runtime.lastError.message}`}):r&&r[0]&&r[0].result?(console.log("POPUP: Pengisian field di halaman selesai.",r[0].result),r[0].result):(console.warn("POPUP: Tidak ada hasil yang dikembalikan dari script halaman atau format tidak sesuai."),{success:!1,error:"Tidak ada hasil dari script halaman atau format tidak sesuai."})}catch(e){return console.error("POPUP: Error dalam fungsi fillAdobeStockFields:",e),{success:!1,error:e.message,stack:e.stack}}}(e,t,o,a);console.log(`POPUP: Hasil auto-fill untuk gambar index ${t}:`,r),r.success||console.error("Gagal mengisi form:",r.error)}catch(e){console.error("Error saat auto-fill:",e)}try{const t="string"==typeof e?JSON.parse(e):e;r.innerHTML=`\n        <h3 style="margin: 0 0 15px 0; color: #2E073F; border-bottom: 1px solid #7A1CAC; padding-bottom: 8px;">Generated Metadata</h3>\n        \n        <div style="margin-bottom: 12px;">\n          <div style="font-weight: 600; margin-bottom: 4px; color: #2E073F;">Image Type</div>\n          <div style="background: #2E073F; padding: 10px; border-radius: 6px; border: 1px solid #e0e0e0;">\n            ${t.imageType||"Not specified"}\n          </div>\n        </div>\n        \n        <div style="margin-bottom: 12px;">\n          <div style="font-weight: 600; margin-bottom: 4px; color: #2E073F;">Category</div>\n          <div style="background: #2E073F; padding: 10px; border-radius: 6px; border: 1px solid #e0e0e0;">\n            ${t.category||"Not specified"}\n          </div>\n        </div>\n        \n        <div style="margin-bottom: 12px;">\n          <div style="font-weight: 600; margin-bottom: 4px; color: #2E073F;">Title</div>\n          <div style="background: #2E073F; padding: 10px; border-radius: 6px; border: 1px solid #e0e0e0; line-height: 1.4; font-weight: 500;">\n            ${t.caption||"No title generated"}\n          </div>\n          <div style="font-size: 12px; color: #666; margin-top: 4px; text-align: right;">\n            ${t.caption?`${t.caption.length} characters`:""}\n          </div>\n        </div>\n        \n        <div style="margin-bottom: 12px;">\n          <div style="font-weight: 600; margin-bottom: 4px; color: #2E073F;">\n            Keywords (${t.keywords?t.keywords.length:0})\n          </div>\n          <div style="background: #2E073F; padding: 12px; border-radius: 6px; border: 1px solid #e0e0e0; line-height: 1.6;">\n            ${t.keywords?t.keywords.map((e=>`<span style="display: inline-block; background: #7A1CAC; padding: 2px 8px; border-radius: 12px; margin: 0 6px 6px 0;">${e}</span>`)).join(""):"No keywords generated"}\n          </div>\n        </div>\n        \n\n      `;const o=document.createElement("div");o.style.marginTop="15px",o.style.padding="10px",o.style.borderRadius="4px",o.style.textAlign="center",o.style.backgroundColor="#e8f5e9",o.style.color="#2e7d32",o.innerHTML="âœ“ Form Adobe Stock berhasil diisi",r.appendChild(o),setTimeout((()=>{o.style.opacity="0",o.style.transition="opacity 0.5s",setTimeout((()=>o.remove()),500)}),3e3)}catch(t){r.innerHTML=`\n        <h3 style="margin: 0 0 10px 0; color: #2E073F;">Hasil Generate</h3>\n        <div style="background: red; padding: 12px; border-radius: 4px; white-space: pre-wrap; font-family: monospace;">\n          ${e}\n        </div>\n      `}return r}async function s(){console.log("getActiveAdobeStockTab: Function called");try{const e=await chrome.tabs.query({url:"*://contributor.stock.adobe.com/*",active:!0,windowType:"normal"});if(console.log("getActiveAdobeStockTab: Queried potential tabs:",JSON.stringify(e)),e.length>0){const t=e[0];return console.log("getActiveAdobeStockTab: Found Adobe Stock Contributor tab:",JSON.stringify(t)),t}return console.log("getActiveAdobeStockTab: No active Adobe Stock Contributor tab found in normal windows."),null}catch(t){return console.error("getActiveAdobeStockTab: Error querying tabs:",t),statusDiv.innerHTML='\n      <div style="color: #d32f2f; background-color: #ffebee; padding: 10px; border-radius: 4px; margin-bottom: 10px;">\n        Halaman Adobe Stock Contributor tidak ditemukan atau tidak aktif. Pastikan tab Adobe Stock adalah tab aktif di jendela browser utama.\n      </div>\n    ',e.innerHTML="",void e.appendChild(statusDiv)}}async function l(){const t=document.createElement("div");t.style.marginTop="15px",t.style.padding="15px",t.style.backgroundColor="#7A1CAC",t.style.borderRadius="8px",t.style.fontFamily="Arial, sans-serif";const o=await s();if(!o)return t.innerHTML='\n      <div style="color: #d32f2f; background-color: #ffebee; padding: 10px; border-radius: 4px; margin-bottom: 10px;">\n        Halaman Adobe Stock Contributor tidak ditemukan atau tidak aktif. Pastikan tab Adobe Stock adalah tab aktif di jendela browser utama.\n      </div>\n    ',e.innerHTML="",void e.appendChild(t);t.innerHTML='\n    <h3 style="margin: 0 0 10px 0; color: #2E073F;">Adobe Stock AI Metadata Injector</h3>\n    <div id="processStatus">Mengambil gambar pertama...</div>\n    <div id="metadataResult" style="margin-top: 15px;"></div>\n  ',e.innerHTML="",e.appendChild(t);const n=t.querySelector("#processStatus"),l=t.querySelector("#metadataResult");l.innerHTML="";try{const[e]=await chrome.scripting.executeScript({target:{tabId:o.id},function:()=>{const e=document.querySelectorAll('.content-grid[data-t="assets-content-grid"] img');return Array.from(e).map((e=>e.src)).filter((e=>e))}});if(!e||!e.result)throw new Error("Gagal mengambil URL gambar dari halaman. Hasil script kosong atau tidak terduga.");const t=e.result;if(!t||0===t.length)throw new Error("Tidak menemukan gambar di grid halaman ini.");n.textContent=`Ditemukan ${t.length} gambar. Memulai proses...`;for(let e=0;e<t.length;e++){const r=t[e],s=e+1;n.textContent=`Memproses gambar ${s} dari ${t.length}: Mengenerate metadata...`;try{const c=await a(r);n.textContent=`Memproses gambar ${s} dari ${t.length}: Metadata digenerate. Menampilkan & mengisi form...`;const d=document.getElementById("generativeAiToggle"),g=!!d&&d.checked,m=await i(c,e,o.id,g),p=document.createElement("h4");p.textContent=`Hasil untuk Gambar ${s}`;const u=document.createElement("div");u.appendChild(p),u.appendChild(m),l.firstChild&&(l.firstChild.style.marginTop="20px",l.firstChild.style.borderTop="1px dashed #ccc",l.firstChild.style.paddingTop="10px"),l.prepend(u)}catch(e){console.error(`Error memproses gambar ${s} (${r}):`,e);const t=document.createElement("div");t.innerHTML=`\n          <h4 style="margin-top:20px; border-top:1px dashed #ccc; padding-top:10px; color: #d32f2f;">Error untuk Gambar ${s}</h4>\n          <div style="color: #d32f2f; background-color: #ffebee; padding: 10px; border-radius: 4px; margin-top: 5px;">\n            Gagal memproses gambar: ${e.message}\n          </div>`,l.appendChild(t)}}if(n.textContent=`Selesai memproses ${t.length} gambar.`,t.length>0){n.textContent+=" Mencoba menyimpan pekerjaan...",console.log("PROCESS_GRID: Mencoba mengklik tombol 'Save work' setelah semua gambar diproses.");try{const[e]=await chrome.scripting.executeScript({target:{tabId:o.id},function:r});e&&e.result?(e.result.success?(console.log("PROCESS_GRID: Tombol 'Save work' berhasil diklik via script."),n.textContent+=" Pekerjaan berhasil disimpan."):(console.warn("PROCESS_GRID: Gagal mengklik tombol 'Save work' via script:",e.result.error),n.textContent+=` Gagal menyimpan: ${e.result.error}`),e.result.log&&e.result.log.length>0&&e.result.log.forEach((e=>console.log(`PROCESS_GRID (from clickSaveWorkButtonScript): ${e}`)))):(console.warn("PROCESS_GRID: Tidak ada hasil dari script klik 'Save work'."),n.textContent+=" Gagal menyimpan: tidak ada respons dari skrip.")}catch(e){console.error("PROCESS_GRID: Error saat mencoba mengklik 'Save work':",e),n.textContent+=` Gagal menyimpan: ${e.message}`}}}catch(e){console.error("Error dalam processAllImagesInGrid:",e),n.innerHTML=`\n      <div style="color: #d32f2f; background-color: #ffebee; padding: 10px; border-radius: 4px; margin-top: 10px;">\n        Gagal memulai proses: ${e.message}\n      </div>\n    `}}}));